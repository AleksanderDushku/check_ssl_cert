{"name":"Check ssl cert","tagline":"check_ssl_cert is a Nagios plugin to check the CA and validity of an X.509 certificate","body":"\r\n (c) Matteo Corti, ETH Zurich, 2007-2012\r\n (c) Matteo Corti, 2007-2015\r\n\r\n  see AUTHORS for the complete list of contributors\r\n\r\ncheck_ssl_cert\r\n\r\nA Nagios plugin to check an X.509 certificate:\r\n - checks if the server is running and delivers a valid certificate\r\n - checks if the CA matches a given pattern\r\n - checks the validity\r\n\r\nUsage:\r\n======\r\n\r\ncheck_ssl_cert -H host [OPTIONS]\r\n\r\nArguments:\r\n   -H,--host host         server\r\n\r\nOptions:\r\n   -A,--noauth            ignore authority warnings (expiration only)\r\n      --altnames          matches the pattern specified in -n with alternate\r\n                          names too\r\n   -C,--clientcert path   use client certificate to authenticate\r\n      --clientpass phrase set passphrase for client certificate.\r\n   -c,--critical days     minimum number of days a certificate has to be valid\r\n                          to issue a critical status\r\n   -e,--email address     pattern to match the email address contained in the\r\n                          certificate\r\n   -f,--file file         local file path (works with -H localhost only)\r\n   -h,--help,-?           this help message\r\n      --long-output list  append the specified comma separated (no spaces) list\r\n                          of attributes to the plugin output on additional lines.\r\n                          Valid attributes are:\r\n                            enddate, startdate, subject, issuer, modulus, serial,\r\n                            hash, email, ocsp_uri and fingerprint.\r\n                          'all' will include all the available attributes.\r\n   -i,--issuer issuer     pattern to match the issuer of the certificate\r\n   -n,--cn name           pattern to match the CN of the certificate\r\n   -N,--host-cn           match CN with the host name\r\n      --ocsp              check revocation via OCSP\r\n   -o,--org org           pattern to match the organization of the certificate\r\n      --openssl path      path of the openssl binary to be used\r\n   -p,--port port         TCP port\r\n   -P,--protocol protocol use the specific protocol {http|smtp|pop3|imap|ftp|xmpp}\r\n                          http:               default\r\n                          smtp,pop3,imap,ftp: switch to TLS\r\n   -s,--selfsigned        allows self-signed certificates\r\n      --serial serialnum  pattern to match the serial number\r\n   -S,--ssl version       force SSL version (2,3)\r\n   -r,--rootcert path     root certificate or directory to be used for\r\n                          certificate validation\r\n   -t,--timeout           seconds timeout after the specified time\r\n                          (defaults to 15 seconds)\r\n      --temp dir          directory where to store the temporary files\r\n      --tls1              force TLS version 1\r\n   -v,--verbose           verbose output\r\n   -V,--version           version\r\n   -w,--warning days      minimum number of days a certificate has to be valid\r\n                          to issue a warning status\r\n\r\nExpect:\r\n=======\r\n\r\ncheck_ssl_cert requires 'expect' to enable timouts. If expect is not\r\npresent on your system timeouts will be disabled.\r\n\r\nSee: http://en.wikipedia.org/wiki/Expect\r\n\r\nPerl and Date::Parse:\r\n=====================\r\n\r\nIf perl and Date::Parse are available the plugin will also compute for\r\nhow many days the certificate will be valid and put the information in\r\nthe performance data. If perl or Date::Parse are not available the\r\ninformation will not be available.\r\n\r\nVirtual servers:\r\n================\r\n\r\ncheck_ssl_client supports the servername TLS extension in ClientHello\r\nif the installed openssl version provides it. This is needed if you\r\nare checking a machine with virtual hosts.\r\n\r\nNotes:\r\n======\r\n\r\nthe root certificate corresponding to the checked certificate must be\r\navailable to openssl or specified with the '-r cabundle' or\r\n'--rootcert cabundle' option, where cabundle is either a file for -CAfile\r\nor a directory for -CApath.\r\n\r\nOn Mac OS X the root certificates bundle is stored in the Keychain and\r\nopenssl will complain with:\r\n\r\n   verification error: unable to get local issuer certificate\r\n\r\nThe bundle can be extracted with:\r\n\r\n$ sudo security find-certificate -a \\\r\n  -p /System/Library/Keychains/SystemRootCertificates.keychain > cabundle.crt\r\n\r\nBugs:\r\n=====\r\n\r\nReport bugs to: Matteo Corti <matteo@corti.li>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}